<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>

<title>AWK One liner: 7</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# double space a file
awk '1;{print ""}'
awk 'BEGIN{ORS="\n\n"};1'
</description>
<guid>7</guid>

<title>AWK One liner: 9</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# triple space a file
awk '1;{print "\n"}'
</description>
<guid>9</guid>

<title>AWK One liner: 12</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# precede each line by its line number FOR ALL FILES TOGETHER, with tab.
awk '{print NR "\t" $0}' files*
</description>
<guid>12</guid>

<title>AWK One liner: 15</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# count lines (emulates "wc -l")
awk 'END{print NR}'
</description>
<guid>15</guid>

<title>AWK One liner: 16</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# print the sums of the fields of every line
awk '{s=0; for (i=1; i<=NF; i++) s=s+$i; print s}'
</description>
<guid>16</guid>

<title>AWK One liner: 17</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# add all fields in all lines and print the sum
awk '{for (i=1; i<=NF; i++) s=s+$i}; END{print s}'
</description>
<guid>17</guid>

<title>AWK One liner: 19</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# print the total number of fields ("words") in all lines
awk '{ total = total + NF }; END {print total}' file
</description>
<guid>19</guid>

<title>AWK One liner: 20</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# print the total number of lines that contain "Beth"
awk '/Beth/{n++}; END {print n+0}' file
</description>
<guid>20</guid>

<title>AWK One liner: 22</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# print the number of fields in each line, followed by the line
awk '{ print NF ":" $0 } '
</description>
<guid>22</guid>

<title>AWK One liner: 23</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# print the last field of each line
awk '{ print $NF }'
</description>
<guid>23</guid>

<title>AWK One liner: 24</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# print the last field of the last line
awk '{ field = $NF }; END{ print field }'
</description>
<guid>24</guid>

<title>AWK One liner: 25</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# print every line with more than 4 fields
awk 'NF > 4'
</description>
<guid>25</guid>

<title>AWK One liner: 26</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# print every line where the value of the last field is > 4
awk '$NF > 4'
</description>
<guid>26</guid>

<title>AWK One liner: 28</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# IN UNIX ENVIRONMENT: convert DOS newlines (CR/LF) to Unix format
awk '{sub(/\r$/,"");print}'   # assumes EACH line ends with Ctrl-M
</description>
<guid>28</guid>

<title>AWK One liner: 29</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# IN UNIX ENVIRONMENT: convert Unix newlines (LF) to DOS format
awk '{sub(/$/,"\r");print}
</description>
<guid>29</guid>

<title>AWK One liner: 30</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# IN DOS ENVIRONMENT: convert Unix newlines (LF) to DOS format
awk 1
</description>
<guid>30</guid>

<title>AWK One liner: 32</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# Use "tr" instead.
tr -d \r <infile >outfile            # GNU tr version 1.22 or higher
</description>
<guid>32</guid>

<title>AWK One liner: 33</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# delete leading whitespace (spaces, tabs) from front of each line
# aligns all text flush left
awk '{sub(/^[ \t]+/, ""); print}'
</description>
<guid>33</guid>

<title>AWK One liner: 34</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# delete trailing whitespace (spaces, tabs) from end of each line
awk '{sub(/[ \t]+$/, "");print}'
</description>
<guid>34</guid>

<title>AWK One liner: 36</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# insert 5 blank spaces at beginning of each line (make page offset)
awk '{sub(/^/, "     ");print}'
</description>
<guid>36</guid>

<title>AWK One liner: 37</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# align all text flush right on a 79-column width
awk '{printf "%79s\n", $0}' file*
</description>
<guid>37</guid>

<title>AWK One liner: 38</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# center all text on a 79-character width
awk '{l=length();s=int((79-l)/2); printf "%"(s+l)"s\n",$0}' file*
</description>
<guid>38</guid>

<title>AWK One liner: 40</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# substitute "foo" with "bar" ONLY for lines which contain "baz"
awk '/baz/{gsub(/foo/, "bar")};{print}'
</description>
<guid>40</guid>

<title>AWK One liner: 41</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# substitute "foo" with "bar" EXCEPT for lines which contain "baz"
awk '!/baz/{gsub(/foo/, "bar")};{print}'
</description>
<guid>41</guid>

<title>AWK One liner: 42</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# change "scarlet" or "ruby" or "puce" to "red"
awk '{gsub(/scarlet|ruby|puce/, "red"); print}'
</description>
<guid>42</guid>

<title>AWK One liner: 43</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# reverse order of lines (emulates "tac")
awk '{a[i++]=$0} END {for (j=i-1; j>=0;) print a[j--] }' file*
</description>
<guid>43</guid>

<title>AWK One liner: 45</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# print and sort the login names of all users
awk -F ":" '{ print $1 | "sort" }' /etc/passwd
</description>
<guid>45</guid>

<title>AWK One liner: 46</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# print the first 2 fields, in opposite order, of every line
awk '{print $2, $1}' file
</description>
<guid>46</guid>

<title>AWK One liner: 47</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# switch the first 2 fields of every line
awk '{temp = $1; $1 = $2; $2 = temp}' file
</description>
<guid>47</guid>

<title>AWK One liner: 48</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# print every line, deleting the second field of that line
awk '{ $2 = ""; print }'
</description>
<guid>48</guid>

<title>AWK One liner: 49</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# print in reverse order the fields of every line
awk '{for (i=NF; i>0; i--) printf("%s ",i);printf ("\n")}' file
</description>
<guid>49</guid>

<title>AWK One liner: 50</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# remove duplicate, consecutive lines (emulates "uniq")
awk 'a !~ $0; {a=$0}'
</description>
<guid>50</guid>

<title>AWK One liner: 52</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# concatenate every 5 lines of input, using a comma separator
# between fields
awk 'ORS=%NR%5?",":"\n"' file
</description>
<guid>52</guid>

<title>AWK One liner: 55</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# print first 10 lines of file (emulates behavior of "head")
awk 'NR < 11'
</description>
<guid>55</guid>

<title>AWK One liner: 56</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# print first line of file (emulates "head -1")
awk 'NR>1{exit};1'
</description>
<guid>56</guid>

<title>AWK One liner: 58</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# print the last line of a file (emulates "tail -1")
awk 'END{print}'
</description>
<guid>58</guid>

<title>AWK One liner: 59</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# print only lines which match regular expression (emulates "grep")
awk '/regex/'
</description>
<guid>59</guid>

<title>AWK One liner: 60</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# print only lines which do NOT match regex (emulates "grep -v")
awk '!/regex/'
</description>
<guid>60</guid>

<title>AWK One liner: 62</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# print the line immediately after a regex, but not the line
# containing the regex
awk '/regex/{getline;print}'
</description>
<guid>62</guid>

<title>AWK One liner: 63</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# grep for AAA and BBB and CCC (in any order)
awk '/AAA/; /BBB/; /CCC/'
</description>
<guid>63</guid>

<title>AWK One liner: 64</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# grep for AAA and BBB and CCC (in that order)
awk '/AAA.*BBB.*CCC/'
</description>
<guid>64</guid>

<title>AWK One liner: 65</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# print only lines of 65 characters or longer
awk 'length > 64'
</description>
<guid>65</guid>

<title>AWK One liner: 66</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# print only lines of less than 65 characters
awk 'length < 64'
</description>
<guid>66</guid>

<title>AWK One liner: 67</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# print section of file from regular expression to end of file
awk '/regex/,0'
awk '/regex/,EOF'
</description>
<guid>67</guid>

<title>AWK One liner: 68</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# print section of file based on line numbers (lines 8-12, inclusive)
awk 'NR==8,NR==12'
</description>
<guid>68</guid>

<title>AWK One liner: 69</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# print line number 52
awk 'NR==52'
awk 'NR==52 {print;exit}'          # more efficient on large files
</description>
<guid>69</guid>

<title>AWK One liner: 70</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# print section of file between two regular expressions (inclusive)
awk '/Iowa/,/Montana/'             # case sensitive
</description>
<guid>70</guid>

<title>AWK One liner: 72</title>
<link>http://www.gnu.org/software/gawk/manual</link>
<description>
# delete ALL blank lines from a file (same as "grep '.' ")
awk NF
awk '/./'
</description>
<guid>72</guid>

</channel> 
</rss>

